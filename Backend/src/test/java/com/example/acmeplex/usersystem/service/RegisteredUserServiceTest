package com.example.acmeplex.usersystem.tests.service;

import com.example.acmeplex.usersystem.dto.RegisteredUserDTO;
import com.example.acmeplex.usersystem.model.RegisteredUser;
import com.example.acmeplex.usersystem.repository.RegisteredUserRepository;
import com.example.acmeplex.usersystem.service.impl.RegisteredUserServiceImpl;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.modelmapper.ModelMapper;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

class RegisteredUserServiceTests {

    @Mock
    private RegisteredUserRepository registeredUserRepository;

    @Mock
    private ModelMapper modelMapper;

    @InjectMocks
    private RegisteredUserServiceImpl registeredUserService;

    private RegisteredUser existingEntity;
    private RegisteredUserDTO existingDTO;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        existingEntity = new RegisteredUser("John Doe", "john@example.com", "123 Elm St", "1234567812345678", true);
        existingEntity.setId(1L);
        existingDTO = new RegisteredUserDTO(1L, "John Doe", "john@example.com", "123 Elm St", "1234567812345678", true);
        when(modelMapper.map(any(RegisteredUser.class), any())).thenReturn(existingDTO);
        when(modelMapper.map(any(RegisteredUserDTO.class), any())).thenReturn(existingEntity);
    }

    @Test
    void testGetRegisteredUserById_ifUserExists() {
        when(registeredUserRepository.findById(1L)).thenReturn(Optional.of(existingEntity));

        RegisteredUserDTO result = registeredUserService.getRegisteredUserById(1L);

        assertEquals(existingDTO.getName(), result.getName());
        assertEquals(existingDTO.getEmail(), result.getEmail());
    }

    @Test
    void testGetRegisteredUserById_ifUserDoesNotExist() {
        when(registeredUserRepository.findById(1L)).thenReturn(Optional.empty());

        assertThrows(RuntimeException.class, () -> {
            registeredUserService.getRegisteredUserById(1L);
        });
    }
}